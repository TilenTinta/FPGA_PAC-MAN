library ieee, work;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.procpak.all;

entity program is
    Port (
		address	: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
		clken		: IN STD_LOGIC  := '1';
		clock		: IN STD_LOGIC  := '1';
		data		: IN STD_LOGIC_VECTOR (11 DOWNTO 0);
		wren		: IN STD_LOGIC ;
		q		: OUT STD_LOGIC_VECTOR (11 DOWNTO 0)
	);
end program;

architecture Behavioral of program is
  
 type memory is array(0 to 255) of unsigned(11 downto 0);
 signal m : memory := (
0=> lda & x"0f",
1=> sta & x"0d",
2=> outp & x"01",
3=> lda & x"10",
4=> sta & x"0e",
5=> outp & x"02",
6=> inp & x"01",
7=> jze & x"06",
8=> lda & x"0d",
9=> add & x"11",
10=> sta & x"0d",
11=> outp & x"01",
12=> jmp & x"06",
13=> x"000",
14=> x"000",
15=> x"005",
16=> x"00a",
17=> x"001",
others => x"000"
);

begin

 p: process(clock)
 begin
   if rising_edge(clock) and clken='1' then
		q <= STD_LOGIC_VECTOR(m(to_integer(unsigned(address))));
  
      if wren = '1' then
        m(to_integer(unsigned(address))) <= unsigned(data);
      end if;
   end if;
 end process;

end Behavioral;
